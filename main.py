# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
import tensorflow as tf

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.LoadImage = QtWidgets.QPushButton(self.centralwidget)
        self.LoadImage.setGeometry(QtCore.QRect(90, 430, 191, 51))
        self.LoadImage.setObjectName("LoadImage")
        self.PredictImage = QtWidgets.QPushButton(self.centralwidget)
        self.PredictImage.setGeometry(QtCore.QRect(320, 427, 171, 51))
        self.PredictImage.setObjectName("PredictImage")
        self.Image = QtWidgets.QLabel(self.centralwidget)
        self.Image.setGeometry(QtCore.QRect(150, 110, 261, 261))
        self.Image.setText("")
        self.Image.setObjectName("Image")
        self.Text = QtWidgets.QTextBrowser(self.centralwidget)
        self.Text.setGeometry(QtCore.QRect(530, 180, 231, 50))
        self.Text.setObjectName("Text")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.model = tf.keras.models.load_model('Model Saved/')   
        self.tmp = None
    
        self.LoadImage.clicked.connect(self.loadimage)
        self.PredictImage.clicked.connect(self.predictimage)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.LoadImage.setText(_translate("MainWindow", "Load Image"))
        self.PredictImage.setText(_translate("MainWindow", "Predict Image"))

    def loadimage(self):

        self.filename = QtWidgets.QFileDialog.getOpenFileName(filter =  'Image (*.*)')
        self.filename = self.filename[0]
        print(self.filename)
        self.Text.setText("Load Image Succesful!")
        self.image = cv2.imread(self.filename)
        
        self.setPhoto(self.image)

    def setPhoto(self, image):

        self.tmp = image
        image = cv2.resize(image, (256, 256), cv2.INTER_AREA)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QtGui.QImage(image.data, image.shape[1], image.shape[0], QtGui.QImage.Format_RGB888)
        self.Image.setPixmap(QtGui.QPixmap.fromImage(image))


    def predictimage(self):

        class_names = ['buildings', 'forest', 'glacier', 'mountain', 'sea', 'street']

        self.tmp = cv2.resize(self.tmp, (150, 150))
        self.tmp = np.expand_dims(self.tmp, axis = 0)
        self.tmp = self.tmp / 255
  
        self.predictions = self.model.predict(self.tmp)    
        pred_labels = np.argmax(self.predictions, axis = 1)

        self.Text.setText("Model predict: {} \nConfidence: {}%" .format(class_names[int(pred_labels)], round(np.amax(self.predictions)* 100, 2)))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
